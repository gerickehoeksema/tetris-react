{"ast":null,"code":"import _slicedToArray from \"D:\\\\Projects 2\\\\Training\\\\react-tetris\\\\react-tetris\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["D:/Projects 2/Training/react-tetris/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACnBL,QAAQ,CAACE,WAAW,EAAZ,CADW;AAAA;AAAA,QACtCI,KADsC;AAAA,QAC/BC,QAD+B;;AAG7CN,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC7B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAC9BA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADa,CAAjB;AAGH,KALD;;AAOAN,IAAAA,QAAQ,CAACO,IAAI,IAAIN,WAAW,CAACM,IAAD,CAApB,CAAR;AACH,GATQ,EASN,EATM,CAAT;AAWA,SAAO,CAACR,KAAD,EAAQC,QAAR,CAAP;AACH,CAfM","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n\r\n    useEffect(()=>{\r\n        const updateStage = prevStage => {\r\n            // First flush the stage\r\n            const newStage = prevStage.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            );\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n    }, []);\r\n\r\n    return [stage, setStage];\r\n}"]},"metadata":{},"sourceType":"module"}