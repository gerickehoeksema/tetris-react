{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects 2\\\\tetris-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\Projects 2\\\\tetris-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const usePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, usePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["D:/Projects 2/tetris-react/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","usePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACCL,QAAQ,CAAC;AACjCM,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD4B;AAEjCC,IAAAA,SAAS,EAAEP,UAAU,CAAC,CAAD,CAAV,CAAcQ,KAFQ;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CADT;AAAA;AAAA,QACpBC,MADoB;AAAA,QACZC,SADY;;AAO3B,QAAMC,YAAY,GAAG,CAAC;AAAEP,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AACzCE,IAAAA,SAAS,CAACE,IAAI,sBACPA,IADO;AAEVT,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFK;AAGVG,MAAAA;AAHU,MAAL,CAAT;AAKH,GAND;;AAQA,QAAMK,WAAW,GAAGf,WAAW,CAAC,MAAM;AAClCY,IAAAA,SAAS,CAAC;AACNP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BI,QAAAA,CAAC,EAAE;AAA7B,OADC;AAENC,MAAAA,SAAS,EAAEN,eAAe,GAAGO,KAFvB;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM7B,EAN6B,CAA/B;AAOA,SAAO,CAACC,MAAD,EAASE,YAAT,EAAuBE,WAAvB,CAAP;AACH,CAvBM","sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    });\r\n\r\n    const usePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n            collided\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0},\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        })\r\n    },[])\r\n    return [player, usePlayerPos, resetPlayer];\r\n}"]},"metadata":{},"sourceType":"module"}