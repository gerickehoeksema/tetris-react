{"ast":null,"code":"import _slicedToArray from \"D:\\\\Projects 2\\\\tetris-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Draw the teromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.colided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // Check if collided\n\n      if (player.colided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["D:/Projects 2/tetris-react/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","colided","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACnBL,QAAQ,CAACE,WAAW,EAAZ,CADW;AAAA;AAAA,QACtCI,KADsC;AAAA,QAC/BC,QAD+B;;AAG7CN,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC7B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAC9BA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADa,CAAjB,CAF6B,CAM7B;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACjCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAGD,KAAK,KAAK,CAAb,EAAgB;AACZP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,EAE1C,GAAEb,MAAM,CAACgB,OAAP,GAAiB,QAAjB,GAA4B,OAAQ,EAFI,CAA/C;AAIH;AACJ,SAPD;AAQH,OATD,EAP6B,CAiB7B;;AACA,UAAGhB,MAAM,CAACgB,OAAV,EAAmB;AACff,QAAAA,WAAW;AACd;;AAED,aAAOK,QAAP;AACH,KAvBD;;AAyBAH,IAAAA,QAAQ,CAACc,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR;AACH,GA3BQ,EA2BN,CAACjB,MAAD,CA3BM,CAAT;AA6BA,SAAO,CAACE,KAAD,EAAQC,QAAR,CAAP;AACH,CAjCM","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n\r\n    useEffect(()=>{\r\n        const updateStage = prevStage => {\r\n            // First flush the stage\r\n            const newStage = prevStage.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            );\r\n\r\n            // Draw the teromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if(value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.colided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                })\r\n            });\r\n            // Check if collided\r\n            if(player.colided) {\r\n                resetPlayer();\r\n            }\r\n\r\n            return newStage;\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n    }, [player]);\r\n\r\n    return [stage, setStage];\r\n}"]},"metadata":{},"sourceType":"module"}